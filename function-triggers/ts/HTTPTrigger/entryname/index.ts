/* This code sample provides a starter kit to implement server side logic for your Teams App in TypeScript,
 * refer to https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference for complete Azure Functions
 * developer guide.
 */

// Import polyfills for fetch required by msgraph-sdk-javascript.
import "isomorphic-fetch";
import { Context, HttpRequest } from "@azure/functions";
import { Client } from "@microsoft/microsoft-graph-client";
import {
  Configuration,
  createMicrosoftGraphClient,
  loadConfiguration,
  OnBehalfOfUserCredential,
  UserInfo
} from "teamsdev-client";

interface Response {
  status: number;
  body: { [key: string]: any; };
}

/**
 * This function handles requests from teamsfx client.
 * The HTTP request should contain an SSO token queried from Teams in the header.
 * Before trigger this function, teamsfx binding would process the SSO token and generate teamsfx configuration.
 *
 * This function initializes the teamsfx SDK with the configuration and calls these APIs:
 * - OnBehalfOfUserCredential() - Construct credential with the received SSO token and initialized configuration.
 * - getUserInfo() - Get the user"s information from the received SSO token.
 * - createMicrosoftGraphClient() - Get a graph client to access user"s Microsoft 365 data.
 *
 * The response contains multiple message blocks constructed into a JSON object, including:
 * - An echo of the request body.
 * - The display name encoded in the SSO token.
 * - Current user"s Microsoft 365 profile if the user has consented.
 *
 * @param {Context} context - The Azure Functions context object.
 * @param {HttpRequest} req - The HTTP request.
 * @param {teamsfxConfig} config - The teamsfx configuration generated by teamsfx binding.
 */
export default async function run(
  context: Context,
  req: HttpRequest,
  teamsfxConfig: Configuration
): Promise<Response> {
  context.log("TypeScript HTTP trigger function processed a request.");

  // Initialize response.
  const res: Response = {
    status: 200,
    body: {}
  };

  // Put an echo into response body.
  res.body["receivedHTTPRequestBody"] = req.body || "";

  // Set default configuration for teamsfx SDK.
  try {
    loadConfiguration(teamsfxConfig);
  } catch(e) {
    context.log.error(e);
    return {
      status: 500,
      body: {
        error: "Fail to initialize teamsfx SDK."
      }
    }
  }

  // Prepare access token.
  const accessToken: string = req.headers.authorization?.slice(7) ?? "";
  if (!accessToken) {
    return {
      status: 400,
      body: {
        error: "No access token was found in request header."
      }
    }
  }

  // Construct credential.
  let credential: OnBehalfOfUserCredential | undefined = undefined;
  try {
    credential = new OnBehalfOfUserCredential(accessToken);
  } catch(e) {
    context.log.error(e);
    return {
      status: 500,
      body: {
        error: "Configuration is invalid, please check Function app settings."
      }
    }
  }

  // Query user"s information from the access token.
  try {
    const currentUser: UserInfo = await credential.getUserInfo();
    if (currentUser && currentUser.displayName) {
      res.body["userInfoMessage"] = `User display name is ${currentUser.displayName}.`;
    } else {
      res.body["userInfoMessage"] = `No user information was found in access token.`;
    }
  } catch(e) {
    context.log.error(e);
    return {
      status: 400,
      body: {
        error: "Access token is invalid."
      }
    }
  }

  // Create a graph client to access user"s Microsoft 365 data after user has consented.
  try {
    const graphClient: Client = createMicrosoftGraphClient(credential, [".default"]);
    const profile: any = await graphClient.api("/me").get();
    res.body["graphClientMessage"] = profile;
  } catch (e) {
    context.log.error(e);
    return {
      status: 500,
      body: {
        error: "Fail to get profile, maybe consent flow is required."
      }
    }
  }

  return res;
}
