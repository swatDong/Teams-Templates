/* This code sample provides a starter kit to implement server side logic for your Teams App in TypeScript with code
 * snippets, refer to https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference for complete Azure
 * Functions developer guide.
 */

import { MODS, MODSConfig, UserInfo } from 'mods-server';
import { Context, HttpRequest } from '@azure/functions';
import { Client } from "@microsoft/microsoft-graph-client";

/**
 * This function handles requests sent from MODS Client SDK.
 * The HTTP request should contain an SSO token in the header and any content in the body.
 * The SSO token should be queried from Teams client by MODS Client SDK.
 * Before trigger this function, MODS binding would process the SSO token and generate MODS configuration.
 *
 * This function initializes the MODS Server SDK with the configuration and calls these APIs:
 * - getUserInfo() - Get the user's information from the received SSO token.
 * - getMicrosoftGraphClientWithUserIdentity() - Get a graph client to access user's Microsoft 365 data.
 *
 * The response contains multiple message blocks constructed into a JSON object, including:
 * - An echo of the request body.
 * - The display name encoded in the SSO token.
 * - Current user's Microsoft 365 profile if the user has consented.
 *
 * @param {Context} context - The Azure Functions context object.
 * @param {HttpRequest} req - The HTTP request.
 * @param {MODSConfig} config - The MODS configuration generated by MODS Binding.
 */
export default async function run(context: Context, req: HttpRequest, config: MODSConfig): Promise<{ [key: string]: any; }> {
  context.log('HTTP trigger function processed a request.');

  // Initialize response.
  const res: { [key: string]: any; } = {
    status: 200,
    body: {}
  };

  // Put an echo into response body.
  res.body['receivedHTTPRequestBody'] = req.body ?? '';

  // Initialize MODS Server SDK with MODS configuration.
  let client: MODS | undefined = undefined;
  try {
    client = MODS.getInstance(config);
  } catch(e) {
    context.log.error(e);
    res.status = 500;
    res.body['error'] = 'Fail to initialize MODS Server SDK.';
    return res;
  }

  // Query user's information from the authentication token.
  const currentUser: UserInfo = client.getUserInfo();
  if (currentUser && currentUser.displayName) {
    res.body['userInfoMessage'] = `User display name is ${currentUser.displayName}.`;
  } else {
    res.status = 400;
    res.body['userInfoMessage'] = 'Fail to get user display Name.';
    return res;
  }

  // Create a graph client to access user's Microsoft 365 data after user has consented.
  try {
    const graphClient: Client = await client.getMicrosoftGraphClientWithUserIdentity(['.default']);
    const profile: any = await graphClient.api('/me').get();
    res.body['graphClientMessage'] = profile;
  } catch (e) {
    context.log.error(e);
    res.status = 500;
    res.body['graphClientMessage'] = 'Fail to get profile, maybe consent flow is required.';
    return res;
  }

  return res;
}